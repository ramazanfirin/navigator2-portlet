/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mobilekipyonetim.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.mobilekipyonetim.service.model.Order;
import com.mobilekipyonetim.service.service.OrderLocalService;
import com.mobilekipyonetim.service.service.persistence.BranchPersistence;
import com.mobilekipyonetim.service.service.persistence.DevicePersistence;
import com.mobilekipyonetim.service.service.persistence.OrderPersistence;
import com.mobilekipyonetim.service.service.persistence.OrderPriorityPersistence;
import com.mobilekipyonetim.service.service.persistence.PoiPersistence;
import com.mobilekipyonetim.service.service.persistence.VehiclePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the order local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.mobilekipyonetim.service.service.impl.OrderLocalServiceImpl}.
 * </p>
 *
 * @author 002834
 * @see com.mobilekipyonetim.service.service.impl.OrderLocalServiceImpl
 * @see com.mobilekipyonetim.service.service.OrderLocalServiceUtil
 * @generated
 */
public abstract class OrderLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements OrderLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.mobilekipyonetim.service.service.OrderLocalServiceUtil} to access the order local service.
	 */

	/**
	 * Adds the order to the database. Also notifies the appropriate model listeners.
	 *
	 * @param order the order
	 * @return the order that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Order addOrder(Order order) throws SystemException {
		order.setNew(true);

		return orderPersistence.update(order);
	}

	/**
	 * Creates a new order with the primary key. Does not add the order to the database.
	 *
	 * @param orderEntityId the primary key for the new order
	 * @return the new order
	 */
	@Override
	public Order createOrder(int orderEntityId) {
		return orderPersistence.create(orderEntityId);
	}

	/**
	 * Deletes the order with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param orderEntityId the primary key of the order
	 * @return the order that was removed
	 * @throws PortalException if a order with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Order deleteOrder(int orderEntityId)
		throws PortalException, SystemException {
		return orderPersistence.remove(orderEntityId);
	}

	/**
	 * Deletes the order from the database. Also notifies the appropriate model listeners.
	 *
	 * @param order the order
	 * @return the order that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Order deleteOrder(Order order) throws SystemException {
		return orderPersistence.remove(order);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Order.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return orderPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.mobilekipyonetim.service.model.impl.OrderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return orderPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.mobilekipyonetim.service.model.impl.OrderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return orderPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return orderPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return orderPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Order fetchOrder(int orderEntityId) throws SystemException {
		return orderPersistence.fetchByPrimaryKey(orderEntityId);
	}

	/**
	 * Returns the order with the primary key.
	 *
	 * @param orderEntityId the primary key of the order
	 * @return the order
	 * @throws PortalException if a order with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Order getOrder(int orderEntityId)
		throws PortalException, SystemException {
		return orderPersistence.findByPrimaryKey(orderEntityId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return orderPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the orders.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.mobilekipyonetim.service.model.impl.OrderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of orders
	 * @param end the upper bound of the range of orders (not inclusive)
	 * @return the range of orders
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Order> getOrders(int start, int end) throws SystemException {
		return orderPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of orders.
	 *
	 * @return the number of orders
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getOrdersCount() throws SystemException {
		return orderPersistence.countAll();
	}

	/**
	 * Updates the order in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param order the order
	 * @return the order that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Order updateOrder(Order order) throws SystemException {
		return orderPersistence.update(order);
	}

	/**
	 * Returns the branch local service.
	 *
	 * @return the branch local service
	 */
	public com.mobilekipyonetim.service.service.BranchLocalService getBranchLocalService() {
		return branchLocalService;
	}

	/**
	 * Sets the branch local service.
	 *
	 * @param branchLocalService the branch local service
	 */
	public void setBranchLocalService(
		com.mobilekipyonetim.service.service.BranchLocalService branchLocalService) {
		this.branchLocalService = branchLocalService;
	}

	/**
	 * Returns the branch persistence.
	 *
	 * @return the branch persistence
	 */
	public BranchPersistence getBranchPersistence() {
		return branchPersistence;
	}

	/**
	 * Sets the branch persistence.
	 *
	 * @param branchPersistence the branch persistence
	 */
	public void setBranchPersistence(BranchPersistence branchPersistence) {
		this.branchPersistence = branchPersistence;
	}

	/**
	 * Returns the device local service.
	 *
	 * @return the device local service
	 */
	public com.mobilekipyonetim.service.service.DeviceLocalService getDeviceLocalService() {
		return deviceLocalService;
	}

	/**
	 * Sets the device local service.
	 *
	 * @param deviceLocalService the device local service
	 */
	public void setDeviceLocalService(
		com.mobilekipyonetim.service.service.DeviceLocalService deviceLocalService) {
		this.deviceLocalService = deviceLocalService;
	}

	/**
	 * Returns the device persistence.
	 *
	 * @return the device persistence
	 */
	public DevicePersistence getDevicePersistence() {
		return devicePersistence;
	}

	/**
	 * Sets the device persistence.
	 *
	 * @param devicePersistence the device persistence
	 */
	public void setDevicePersistence(DevicePersistence devicePersistence) {
		this.devicePersistence = devicePersistence;
	}

	/**
	 * Returns the order local service.
	 *
	 * @return the order local service
	 */
	public com.mobilekipyonetim.service.service.OrderLocalService getOrderLocalService() {
		return orderLocalService;
	}

	/**
	 * Sets the order local service.
	 *
	 * @param orderLocalService the order local service
	 */
	public void setOrderLocalService(
		com.mobilekipyonetim.service.service.OrderLocalService orderLocalService) {
		this.orderLocalService = orderLocalService;
	}

	/**
	 * Returns the order persistence.
	 *
	 * @return the order persistence
	 */
	public OrderPersistence getOrderPersistence() {
		return orderPersistence;
	}

	/**
	 * Sets the order persistence.
	 *
	 * @param orderPersistence the order persistence
	 */
	public void setOrderPersistence(OrderPersistence orderPersistence) {
		this.orderPersistence = orderPersistence;
	}

	/**
	 * Returns the order priority local service.
	 *
	 * @return the order priority local service
	 */
	public com.mobilekipyonetim.service.service.OrderPriorityLocalService getOrderPriorityLocalService() {
		return orderPriorityLocalService;
	}

	/**
	 * Sets the order priority local service.
	 *
	 * @param orderPriorityLocalService the order priority local service
	 */
	public void setOrderPriorityLocalService(
		com.mobilekipyonetim.service.service.OrderPriorityLocalService orderPriorityLocalService) {
		this.orderPriorityLocalService = orderPriorityLocalService;
	}

	/**
	 * Returns the order priority persistence.
	 *
	 * @return the order priority persistence
	 */
	public OrderPriorityPersistence getOrderPriorityPersistence() {
		return orderPriorityPersistence;
	}

	/**
	 * Sets the order priority persistence.
	 *
	 * @param orderPriorityPersistence the order priority persistence
	 */
	public void setOrderPriorityPersistence(
		OrderPriorityPersistence orderPriorityPersistence) {
		this.orderPriorityPersistence = orderPriorityPersistence;
	}

	/**
	 * Returns the poi local service.
	 *
	 * @return the poi local service
	 */
	public com.mobilekipyonetim.service.service.PoiLocalService getPoiLocalService() {
		return poiLocalService;
	}

	/**
	 * Sets the poi local service.
	 *
	 * @param poiLocalService the poi local service
	 */
	public void setPoiLocalService(
		com.mobilekipyonetim.service.service.PoiLocalService poiLocalService) {
		this.poiLocalService = poiLocalService;
	}

	/**
	 * Returns the poi persistence.
	 *
	 * @return the poi persistence
	 */
	public PoiPersistence getPoiPersistence() {
		return poiPersistence;
	}

	/**
	 * Sets the poi persistence.
	 *
	 * @param poiPersistence the poi persistence
	 */
	public void setPoiPersistence(PoiPersistence poiPersistence) {
		this.poiPersistence = poiPersistence;
	}

	/**
	 * Returns the vehicle local service.
	 *
	 * @return the vehicle local service
	 */
	public com.mobilekipyonetim.service.service.VehicleLocalService getVehicleLocalService() {
		return vehicleLocalService;
	}

	/**
	 * Sets the vehicle local service.
	 *
	 * @param vehicleLocalService the vehicle local service
	 */
	public void setVehicleLocalService(
		com.mobilekipyonetim.service.service.VehicleLocalService vehicleLocalService) {
		this.vehicleLocalService = vehicleLocalService;
	}

	/**
	 * Returns the vehicle persistence.
	 *
	 * @return the vehicle persistence
	 */
	public VehiclePersistence getVehiclePersistence() {
		return vehiclePersistence;
	}

	/**
	 * Sets the vehicle persistence.
	 *
	 * @param vehiclePersistence the vehicle persistence
	 */
	public void setVehiclePersistence(VehiclePersistence vehiclePersistence) {
		this.vehiclePersistence = vehiclePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.mobilekipyonetim.service.model.Order",
			orderLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.mobilekipyonetim.service.model.Order");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Order.class;
	}

	protected String getModelClassName() {
		return Order.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = orderPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.mobilekipyonetim.service.service.BranchLocalService.class)
	protected com.mobilekipyonetim.service.service.BranchLocalService branchLocalService;
	@BeanReference(type = BranchPersistence.class)
	protected BranchPersistence branchPersistence;
	@BeanReference(type = com.mobilekipyonetim.service.service.DeviceLocalService.class)
	protected com.mobilekipyonetim.service.service.DeviceLocalService deviceLocalService;
	@BeanReference(type = DevicePersistence.class)
	protected DevicePersistence devicePersistence;
	@BeanReference(type = com.mobilekipyonetim.service.service.OrderLocalService.class)
	protected com.mobilekipyonetim.service.service.OrderLocalService orderLocalService;
	@BeanReference(type = OrderPersistence.class)
	protected OrderPersistence orderPersistence;
	@BeanReference(type = com.mobilekipyonetim.service.service.OrderPriorityLocalService.class)
	protected com.mobilekipyonetim.service.service.OrderPriorityLocalService orderPriorityLocalService;
	@BeanReference(type = OrderPriorityPersistence.class)
	protected OrderPriorityPersistence orderPriorityPersistence;
	@BeanReference(type = com.mobilekipyonetim.service.service.PoiLocalService.class)
	protected com.mobilekipyonetim.service.service.PoiLocalService poiLocalService;
	@BeanReference(type = PoiPersistence.class)
	protected PoiPersistence poiPersistence;
	@BeanReference(type = com.mobilekipyonetim.service.service.VehicleLocalService.class)
	protected com.mobilekipyonetim.service.service.VehicleLocalService vehicleLocalService;
	@BeanReference(type = VehiclePersistence.class)
	protected VehiclePersistence vehiclePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private OrderLocalServiceClpInvoker _clpInvoker = new OrderLocalServiceClpInvoker();
}