/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mobilekipyonetim.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.mobilekipyonetim.service.model.Device;
import com.mobilekipyonetim.service.model.DeviceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Device service. Represents a row in the &quot;device&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mobilekipyonetim.service.model.DeviceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeviceImpl}.
 * </p>
 *
 * @author 002834
 * @see DeviceImpl
 * @see com.mobilekipyonetim.service.model.Device
 * @see com.mobilekipyonetim.service.model.DeviceModel
 * @generated
 */
public class DeviceModelImpl extends BaseModelImpl<Device>
	implements DeviceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a device model instance should use the {@link com.mobilekipyonetim.service.model.Device} interface instead.
	 */
	public static final String TABLE_NAME = "device";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entityId", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "msisdn", Types.VARCHAR },
			{ "imei", Types.VARCHAR },
			{ "regId", Types.VARCHAR },
			{ "organizationId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table device (entityId INTEGER not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,msisdn VARCHAR(75) null,imei VARCHAR(75) null,regId VARCHAR(75) null,organizationId LONG)";
	public static final String TABLE_SQL_DROP = "drop table device";
	public static final String ORDER_BY_JPQL = " ORDER BY device.imei ASC";
	public static final String ORDER_BY_SQL = " ORDER BY device.imei ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.mobilekipyonetim.service.model.Device"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.mobilekipyonetim.service.model.Device"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.mobilekipyonetim.service.model.Device"),
			true);
	public static long IMEI_COLUMN_BITMASK = 1L;
	public static long ORGANIZATIONID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.mobilekipyonetim.service.model.Device"));

	public DeviceModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _entityId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Device.class;
	}

	@Override
	public String getModelClassName() {
		return Device.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entityId", getEntityId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("msisdn", getMsisdn());
		attributes.put("imei", getImei());
		attributes.put("regId", getRegId());
		attributes.put("organizationId", getOrganizationId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer entityId = (Integer)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String msisdn = (String)attributes.get("msisdn");

		if (msisdn != null) {
			setMsisdn(msisdn);
		}

		String imei = (String)attributes.get("imei");

		if (imei != null) {
			setImei(imei);
		}

		String regId = (String)attributes.get("regId");

		if (regId != null) {
			setRegId(regId);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}
	}

	@Override
	public int getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(int entityId) {
		_entityId = entityId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getMsisdn() {
		if (_msisdn == null) {
			return StringPool.BLANK;
		}
		else {
			return _msisdn;
		}
	}

	@Override
	public void setMsisdn(String msisdn) {
		_msisdn = msisdn;
	}

	@Override
	public String getImei() {
		if (_imei == null) {
			return StringPool.BLANK;
		}
		else {
			return _imei;
		}
	}

	@Override
	public void setImei(String imei) {
		_columnBitmask = -1L;

		if (_originalImei == null) {
			_originalImei = _imei;
		}

		_imei = imei;
	}

	public String getOriginalImei() {
		return GetterUtil.getString(_originalImei);
	}

	@Override
	public String getRegId() {
		if (_regId == null) {
			return StringPool.BLANK;
		}
		else {
			return _regId;
		}
	}

	@Override
	public void setRegId(String regId) {
		_regId = regId;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Device toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Device)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeviceImpl deviceImpl = new DeviceImpl();

		deviceImpl.setEntityId(getEntityId());
		deviceImpl.setGroupId(getGroupId());
		deviceImpl.setCompanyId(getCompanyId());
		deviceImpl.setUserId(getUserId());
		deviceImpl.setUserName(getUserName());
		deviceImpl.setCreateDate(getCreateDate());
		deviceImpl.setModifiedDate(getModifiedDate());
		deviceImpl.setMsisdn(getMsisdn());
		deviceImpl.setImei(getImei());
		deviceImpl.setRegId(getRegId());
		deviceImpl.setOrganizationId(getOrganizationId());

		deviceImpl.resetOriginalValues();

		return deviceImpl;
	}

	@Override
	public int compareTo(Device device) {
		int value = 0;

		value = getImei().compareTo(device.getImei());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Device)) {
			return false;
		}

		Device device = (Device)obj;

		int primaryKey = device.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DeviceModelImpl deviceModelImpl = this;

		deviceModelImpl._originalImei = deviceModelImpl._imei;

		deviceModelImpl._originalOrganizationId = deviceModelImpl._organizationId;

		deviceModelImpl._setOriginalOrganizationId = false;

		deviceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Device> toCacheModel() {
		DeviceCacheModel deviceCacheModel = new DeviceCacheModel();

		deviceCacheModel.entityId = getEntityId();

		deviceCacheModel.groupId = getGroupId();

		deviceCacheModel.companyId = getCompanyId();

		deviceCacheModel.userId = getUserId();

		deviceCacheModel.userName = getUserName();

		String userName = deviceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			deviceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			deviceCacheModel.createDate = createDate.getTime();
		}
		else {
			deviceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deviceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deviceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		deviceCacheModel.msisdn = getMsisdn();

		String msisdn = deviceCacheModel.msisdn;

		if ((msisdn != null) && (msisdn.length() == 0)) {
			deviceCacheModel.msisdn = null;
		}

		deviceCacheModel.imei = getImei();

		String imei = deviceCacheModel.imei;

		if ((imei != null) && (imei.length() == 0)) {
			deviceCacheModel.imei = null;
		}

		deviceCacheModel.regId = getRegId();

		String regId = deviceCacheModel.regId;

		if ((regId != null) && (regId.length() == 0)) {
			deviceCacheModel.regId = null;
		}

		deviceCacheModel.organizationId = getOrganizationId();

		return deviceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{entityId=");
		sb.append(getEntityId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", msisdn=");
		sb.append(getMsisdn());
		sb.append(", imei=");
		sb.append(getImei());
		sb.append(", regId=");
		sb.append(getRegId());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.mobilekipyonetim.service.model.Device");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>msisdn</column-name><column-value><![CDATA[");
		sb.append(getMsisdn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imei</column-name><column-value><![CDATA[");
		sb.append(getImei());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regId</column-name><column-value><![CDATA[");
		sb.append(getRegId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Device.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Device.class };
	private int _entityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _msisdn;
	private String _imei;
	private String _originalImei;
	private String _regId;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _columnBitmask;
	private Device _escapedModel;
}